<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="UserDAO">

    <resultMap id="BaseResultMap"
               type="com.murdock.demo.jdbc.travel.demo.dao.dataobject.UserDO">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="work_num" jdbcType="VARCHAR" property="workNum"/>
        <result column="level" jdbcType="INTEGER" property="level"/>
        <result column="level_type" jdbcType="VARCHAR" property="levelType"/>
        <result column="age" jdbcType="INTEGER" property="age"/>
        <result column="sex" jdbcType="INTEGER" property="sex"/>
        <result column="phone_num" jdbcType="VARCHAR" property="phoneNum"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="ding_talk_no" jdbcType="VARCHAR" property="dingTalkNo"/>
    </resultMap>

    <sql id="columns">
        id,
        user_name,
        nick_name,
        gmt_create,
        gmt_modified,
        type,
        work_num,
        level,
        level_type,
        age,
        sex,
        phone_num,
        email,
        ding_talk_no
    </sql>

    <insert id="insertUser"
            parameterType="com.murdock.demo.jdbc.travel.demo.dao.dataobject.UserDO"
            useGeneratedKeys="true" keyProperty="id">
        insert into user (user_name,
                          nick_name,
                          gmt_create,
                          gmt_modified,
                          type,
                          work_num,
                          level,
                          level_type,
                          age,
                          sex,
                          phone_num,
                          email,
                          ding_talk_no)
        values (#{userName, jdbcType=VARCHAR},
                #{nickName, jdbcType=VARCHAR},
                now(),
                now(),
                #{type, jdbcType=INTEGER},
                #{workNum, jdbcType=VARCHAR},
                #{level, jdbcType=INTEGER},
                #{levelType, jdbcType=VARCHAR},
                #{age, jdbcType=INTEGER},
                #{sex, jdbcType=INTEGER},
                #{phoneNum, jdbcType=VARCHAR},
                #{email, jdbcType=VARCHAR},
                #{dingTalkNo, jdbcType=VARCHAR})
    </insert>

    <select id="queryUser" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="columns" />
        from user
        where id=#{id, jdbcType=BIGINT}
    </select>

    <select id="queryUserList" parameterType="java.util.Map" resultMap="BaseResultMap">
        select
        <include refid="columns" />
        from user
        where level_type=#{param.levelType, jdbcType=VARCHAR}
        order by id desc
        limit #{skip, jdbcType=INTEGER},#{limit, jdbcType=INTEGER}
    </select>

    <select id="countUserList" parameterType="com.murdock.demo.jdbc.travel.demo.dao.param.QueryUserListDAOParam" resultType="java.lang.Integer">
        select
        count(*)
        from user
        where level_type=#{levelType, jdbcType=VARCHAR}
    </select>

    <select id="getMaxUserId" parameterType="com.murdock.demo.jdbc.travel.demo.dao.param.QueryUserListDAOParam" resultType="java.lang.Long">
        select
        max(id)
        from user
        where level_type=#{levelType, jdbcType=VARCHAR}
    </select>

    <select id="getMinUserId" parameterType="com.murdock.demo.jdbc.travel.demo.dao.param.QueryUserListDAOParam" resultType="java.lang.Long">
        select
        min(id)
        from user
        where level_type=#{levelType, jdbcType=VARCHAR}
    </select>

    <select id="scanUserList" parameterType="java.util.Map" resultMap="BaseResultMap">
        select
        <include refid="columns" />
        from user
        <![CDATA[
        where id >= #{startIncludeId, jdbcType=BIGINT} and id < #{endExcludeId, jdbcType=BIGINT}
        ]]>
    </select>


</mapper>
